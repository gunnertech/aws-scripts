#!/usr/bin/env node

/****
 * 
 * setup:
 * yarn install
 * 
 * usage:
 * ./mobile-hub setup -n <project name> [-p <aws profile> -r <aws region of codecommit repo> -l <path location>]
 */

const rp = require('request-promise-native'),
    AWS = require('aws-sdk'),
    fs = require('fs-extra'),
    unzip = require('unzip'),
    awaitWriteStream = require('await-stream-ready').write,
    child_process = require('child_process'),
    promptly = require('promptly'),
    program = require('commander');

const promisify = require('util').promisify,
    fsUnlink = promisify(fs.unlink.bind(fs)),
    fsRemove = promisify(fs.remove.bind(fs)),
    exec = promisify(child_process.exec.bind(child_process)),
    fsReadFile = promisify(fs.readFile.bind(fs)),
    fsWriteFile = promisify(fs.writeFile.bind(fs));

program
    .version('0.1.0')
    .command('setup')
    .description('Uses the Gunner Technology starter template to create a react native project for AWS mobile hub')
    .option('-n, --name <name>', 'Name of project')
    .option('-r, --region [region]', 'AWS Region in which to create the CodeCommit repo', 'us-west-2')
    .option('-p, --profile [profile]', 'Profile for your Gunner Technology account credentials', 'default')
    .option('-l, --location [location]', 'Path of the location where the project should be copied after creation', `${process.env['HOME']}/Documents`)
    .option('-m, --mobile-hub-profile <mobileHubProfile>', 'Name of the profile used for the mobile hub project')
    .option('-g, --mobile-hub-region <mobileHubRegion>', 'Name of the region used for the mobile hub project', 'us-east-1')
    .action(options => {
        getZipFile(options)
            .then(setupGit)
            .then(copyAwsExports)
            .then(cleanUpAwsExports)
            .then(attachCognitoPolicyToAuthRole)
            .then(setUpRemote)
            .then(moveProject)
    })

program.parse(process.argv);

async function writeZip(file, path = './') {
    const rs = fs.createReadStream(file);
    const p = new Promise((resolve, reject) => {
        rs.on('end', () => setTimeout(resolve, 2000));
        rs.on('error', () => reject());
    })

    rs.pipe(unzip.Extract({ path: './' }));

    return p;
}

async function getZipFile(options) {
    const response = await rp({
        url: 'https://github.com/gunnertech/react-native-mobile-hub-starter/archive/master.zip',
        encoding: null
    });
    await fsWriteFile("./react-native-mobile-hub-starter.zip", response);
    await writeZip('./react-native-mobile-hub-starter.zip');
    fs.moveSync('./react-native-mobile-hub-starter-master', `./${options.name}`);
    await fsUnlink("./react-native-mobile-hub-starter.zip");
    return options;
}

async function setupGit(options) {
    await exec(`cd ${options.name} && git init && git add .; git commit -am "first commit" && cd awsmobile/client && yarn install && cd ../../../`);
    console.log(`
    from another terminal outside of this project, please run:
    
    cd ${process.env['HOME']} && awsmobile start ${options.name}-temp react-native
    
    You'll see "missing aws account settings" select "Y" and paste in the credentials from the IAM mobilehub user created during account setup.

    When asked for project name, make sure to use: ${options.name}
    `);
    const answer = await promptly.confirm('Finished setting up project? (y/n)');
    console.log("Done Setting Up Git...");
    return options;
}


async function copyAwsExports(options) {
    const location = `${process.env['HOME']}/${options.name}-temp`;
    fs.copySync(`${location}/src/aws-exports.js`, `./${options.name}/awsmobile/client/src/aws-exports.js`);
    fs.copySync(`${location}/awsmobilejs/.awsmobile/info`, `./${options.name}/awsmobile/client/awsmobilejs/.awsmobile/info`);

    await fsRemove(`${process.env['HOME']}/${options.name}-temp`);

    console.log("Done Copying AWS Exports...");
    return options;
}


async function cleanUpAwsExports(options) {
    const file = `./${options.name}/awsmobile/client/awsmobilejs/backend/mobile-hub-project.yml`;
    const data = await fsReadFile(file);

    await fsWriteFile(file, data.toString().replace(/client\-2018\-02\-11\-20\-09\-09/g, options.name), 'utf8');

    await exec(`cd ${options.name}/awsmobile/client && awsmobile push`)

    console.log("Done Cleaning up AWS Exports...");
    return options;
}

async function attachCognitoPolicyToAuthRole(options) {
    const file = `./${options.name}/awsmobile/client/awsmobilejs/#current-backend-info/backend-details.json`;
    const file = './backend-details.json';
    const data = await fsReadFile(file);
    const json = JSON.parse(data);

    const role = json.resources.find(resource => resource.name.match(/[^_]+_auth_MOBILEHUB_\d+/));

    const iam = new AWS.IAM({
        credentials: new AWS.SharedIniFileCredentials({
            profile: options.mobileHubProfile,
            filename: `${process.env['HOME']}/.aws/credentials`
        }),
        region: options.mobileHubRegion
    });

    const attachRolePolicy = promisify(iam.attachRolePolicy.bind(iam));

    await attachRolePolicy({
        PolicyArn: 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly',
        RoleName: role.name
    })

    return options;

}

async function setUpRemote(options) {
    const codecommit = new AWS.CodeCommit({
        credentials: new AWS.SharedIniFileCredentials({
            profile: options.profile,
            filename: `${process.env['HOME']}/.aws/credentials`
        }),
        region: options.region
    });

    const createRepository = promisify(codecommit.createRepository.bind(codecommit));

    const resp = await createRepository({
        repositoryName: options.name,
        repositoryDescription: `AWS Mobile Hub Repository for ${options.name}`
    });

    await exec(`cd ${options.name} && git remote add origin ${resp.repositoryMetadata.cloneUrlSsh} && git push -u origin master && cd ..`);

    console.log("Done setting up remote...");

    return options;
}

async function moveProject(options) {
    fs.moveSync(`./${options.name}`, `${options.location}/${options.name}`);

    return options;
}